<?php

include "functions.php";

// Функции для массивов в PHP
// Работа с in_array
// Изучите теорию по следующим ссылкам:

// in_array

// №1⊗ppPmIBAr
task(1);
// Дан массив:
$arr = [1, 2, 3, 4, 5];
// Проверьте, что в нем есть элемент со значением 3.
var_dump(in_array(3, $arr));


// Работа с array_sum и array_product
// Изучите теорию по следующим ссылкам:
// array_sum array_product
// №2⊗ppPmIBAr
task(2);
// Дан массив:
$arr = [1, 2, 3, 4, 5];
// Найдите сумму элементов данного массива.
echo "Сумма элементов массива: " . array_sum($arr);

// №3⊗ppPmIBAr
task(3);
// Дан массив:
$arr = [1, 2, 3, 4, 5];
// Найдите произведение (умножение) элементов данного массива.
echo "Произведение элементов массива: " . array_product($arr);


// №4⊗ppPmIBAr
task(4);
// Дан массив:
$arr = [1, 2, 3, 4, 5];
// С помощью функций array_sum и count найдите
// среднее арифметическое элементов
// (сумма элементов делить на их количество) данного массива.
echo "Среднее арифметическое: " . array_sum($arr) / count($arr);

// Работа с range
// Изучите теорию по следующим ссылкам:
// range - генерирует массив
// range(откуда, докуда, шаг)

// №5⊗ppPmIBAr
task(5);
// Создайте массив, заполненный числами от 1 до 100.
$arr = range(1, 100);
print_r($arr);

// №6⊗ppPmIBAr
task(6);
// Создайте массив, заполненный буквами от 'a' до 'z'.
$arr = range('a', 'z');
print_r($arr);

// №7⊗ppPmIBAr
// Создайте строку '1-2-3-4-5-6-7-8-9' не используя цикл.
task(7);
// создаём массив, expole -> implode
$arr = range(1, 9);
$str = implode("-", $arr);
echo $str;


// №8⊗ppPmIBAr
// Найдите сумму чисел от 1 до 100 не используя цикл.
task(8);
$arr = range(1, 100);
$sumArr = array_sum($arr);
echo $sumArr;


// №9⊗ppPmIBAr
task(9);
// Найдите произведение чисел от 1 до 10 не используя цикл.
echo array_product(range(1, 10));

// Работа с array_merge
// Изучите теорию по следующим ссылкам:
// array_merge - сливает два и более массива вместе

// №10⊗ppPmIBAr
task(10);
// Даны массивы:
$arr1 = [1, 2, 3];
$arr2 = ['a', 'b', 'c'];
// Сделайте из них массив:
// 	[1, 2, 3, 'a', 'b', 'c']
print_r(array_merge($arr1, $arr2));

// Работа с array_slice
// Изучите теорию по следующим ссылкам:
// array_slice

/* 

array_slice отрезает и возвращает часть массива 
массив при этом не меняется 

первый параметр - массив для нарезки 
второй - откуда резать (может быть отрицательным)
третий - сколько элементов чикнуть (если не указать - до конца)
четвёртый - сохранять ли ключи при отрезании

строковые ключи вне зависимости от параметра сохраняются

*/

// №11⊗ppPmIBAr
task(11);
// Дан массив:
// 	$arr = [1, 2, 3, 4, 5];
// С помощью функции array_slice сделайте из него 
//следующий массив:
// 	[2, 3, 4]

print_r(array_slice($arr, 1, 3));

// Работа с array_splice
// Изучите теорию по следующим ссылкам:
// array_splice

/* Функция array_splice отрезает и возвращает часть массива

при этом отрезанная часть исчезает из массива. 

Вместо отрезанной части можно вставлять новые элементы

первый параметр - массив для резки 
2 параметр - с какого элемента начать резку 
3 параметр - сколько элементов чикнуть 
4 параметр - что вставить взамен 

*/

// №12⊗ppPmIBAr

// Дан массив:
task(12);
$arr = [1, 2, 3, 4, 5];
array_splice($arr, 1, 2);
print_r($arr);
// С помощью функции array_splice 
//сделайте из него следующий массив:
// 	[1, 4, 5]    


// №13⊗ppPmIBAr
task(13);
// Дан массив:
$arr = [1, 2, 3, 4, 5];
// С помощью функции array_splice сделайте из него следующий массив:
// 	[2, 3, 4]
$arr = array_splice($arr, 1, 3);
print_r($arr);


// №14⊗ppPmIBAr
task(14);
// Дан массив:
$arr = [1, 2, 3, 4, 5];
// С помощью функции array_splice сделайте из него следующий массив:
// 	[1, 2, 3, 'a', 'b', 'c', 4, 5]
array_splice($arr, 3, 0, ['a', 'b', 'c']);
print_r($arr);

// №15⊗ppPmIBAr
task(15);
// Дан массив:
$arr = [1, 2, 3, 4, 5];
// С помощью функции array_splice сделайте из
// него следующий массив:
// [1, 'a', 'b', 2, 3, 4, 'c',  5, 'e'] 
array_splice($arr, 1, 0, ['a', 'b']);
array_splice($arr, 6, 0, 'c');
array_splice($arr, 8, 0, 'e');
print_r($arr);

// Работа с array_keys, array_values, array_combine
// Изучите теорию по следующим ссылкам:

// array_keys array_values array_combine

/* 
array_keys($arr) - получает ключи массива и записывает их в новый массив
$array_values() - собирает все значения из массива
$array_combine(массив ключей, массив значений) - осуществляет слияние двух массивов
*/

// №16⊗ppPmIBAr
task(16);
// Дан массив:
$arr = ['a' => 1, 'b' => 2, 'c' => 3];
// Запишите в массив $keys ключи из этого массива, а в $values – значения.
$keys = array_keys($arr);
$values = array_values($arr);
print_r($keys);
print_r($values);

// №17⊗ppPmIBAr
task(17);
// Дан массивы:
$arr1 = ['a', 'b', 'c'];
$arr2 = [1, 2, 3];
// Создайте с их помощью следующий массив:
// 	['a' => 1, 'b' => 2, 'c' => 3]
$newArr = array_combine($arr1, $arr2);
print_r($newArr);

// Работа с array_flip, array_reverse
// Изучите теорию по следующим ссылкам:
// array_flip array_reverse

/* array_flip(array) - производит обмен между ключами и значениями массива
array_reverse - обратный порядок массива
*/

// №18⊗ppPmIBAr
task(18);
// Дан массив:
$arr = ['a' => 1, 'b' => 2, 'c' => 3];
// Поменяйте в нем местами ключи и значения.
$arr = array_flip($arr);
print_r($arr);


// №19⊗ppPmIBAr
task(19);
// Дан массив:
$arr = [1, 2, 3, 4, 5];
// Сделайте из него следующий массив:
// 	[5, 4, 3, 2, 1]
$arr = array_reverse($arr);
print_r($arr); // ключи не сохраняем


// Работа с array_search
// Изучите теорию по следующим ссылкам:

// array_search

/* array_search(что ищем, где ищем, насколько строго) */

// №20⊗ppPmIBAr
task(20);
// Дан массив:
$arr = [
    'a',
    '-',
    'b',
    '-',
    'c',
    '-',
    'd'
];
// Найдите позицию первого элемента '-'.
echo array_search("-", $arr);



// №21⊗ppPmIBAr
task(21);
// Дан массив:
$arr = [
    'a',
    '-',
    'b',
    '-',
    'c',
    '-',
    'd'
];
// Найдите позицию первого элемента '-' и удалите его с помощью функции array_splice.
$position = array_search("-", $arr);
array_splice($arr, $position, 1);
print_r($arr);


// Работа с array_replace
// Изучите теорию по следующим ссылкам:

// array_replace

/* 
Функция array_replace заменяет значения первого массива 
значениями с такими же ключами из других переданных массивов. 
Если ключ из первого массива присутствует и во втором массиве, его 
значение заменяется на значение из второго массива. 
Если есть ключ во втором массиве, но отсутствует в первом, он 
будет создан в первом массиве. Если ключ присутствует только в первом 
массиве, то он сохранится как есть. 

Если для замены передано несколько массивов, они будет обработаны 
в порядке их передачи и более поздние массивы будут перезаписывать 
значения предыдущих. 
*/


// №22⊗ppPmIBAr
task(22);
// Дан массив:
$arr = ['a', 'b', 'c', 'd', 'e'];
// Поменяйте элемент с ключом 0 на '!', а элемент с ключом 3 - на '!!'.
$arr = array_replace($arr, [0 => '!', 3 => '!!']);
print_r($arr);


// Работа с сортировкой
// Изучите теорию по следующим ссылкам:

// функции для сортировки

/* 
sort(массив) - сортирует массив по возрастанию элементов, функция изменяет сам массив
rsort - убывание элементов
ksort - возрастание ключей
asort и др.  
*/

// №23⊗ppPmIBAr
task(23);
// Дан массив:


$arr = [
    '3' => 'a',
    '1' => 'c',
    '2' => 'e',
    '4' => 'b'
];
sort($arr);
echo "Обычная сортировка по возрастанию";
print_r(value: $arr);

echo ("Убывание элементов");
rsort($arr);
print_r(value: $arr);

$arr = [
    '3' => 'a',
    '1' => 'c',
    '2' => 'e',
    '4' => 'b'
];

echo "Возрастание элементов с сохранением ключей";
asort($arr);
print_r($arr);

echo "Убывание элементов с сохранением ключей";
arsort($arr);
print_r($arr);

// Попробуйте на нем различные типы сортировок.

// Работа с array_rand
// Изучите теорию по следующим ссылкам:

// array_rand

/* Функция array_rand возвращает случайный ключ из массива. 

Первым параметром задаётся массив, а второй необязательный 
параметр указывает сколько случайных ключей следует вернуть. 

если он не указан возвращается один ключ, а если указан - 
заданное количество ключей в виде массива. 

array_rand(массив, сколько ключей выбрать = 1)

*/

// №24⊗ppPmIBAr
task(24);
// Дан массив:
$arr = ['a' => 1, 'b' => 2, 'c' => 3];
// Выведите на экран случайный ключ из данного массива.
echo array_rand($arr);

// №25⊗ppPmIBAr
task(25);
// Дан массив:
$arr = ['a' => 1, 'b' => 2, 'c' => 3];
// Выведите на экран случайный элемент данного массива.
echo $arr[array_rand($arr)];

// Работа с shuffle
// Изучите теорию по следующим ссылкам:

// shuffle - перемешивает массив, изменяет физически

// №26⊗ppPmIBAr
task(26);
// Дан массив:
$arr = [1, 2, 3, 4, 5];
// Перемешайте его элементы в случайном порядке.
shuffle($arr);
print_r($arr);


// №27⊗ppPmIBAr
task(27);
// Заполните массив числами от 1 до 25 с помощью range, а затем перемешайте его элементы в случайном порядке.
$arr = range(1, 25);
shuffle($arr);
print_r($arr);

// №28⊗ppPmIBAr
task(28);
// Создайте массив, заполненный буквами от 'a' до 'z' так, 
//чтобы буквы шли в случайном порядке и не повторялись.
$arr = range('a', 'z');
shuffle($arr);
print_r($arr);

// №29⊗ppPmIBAr
task(29);
// Сделайте строку длиной 6 символов, 
//состоящую из маленьких английских букв, расположенных в случайном порядке. Буквы не должны повторяться.
$arr = array_slice($arr, 0, 6);
print_r($arr);


// Работа с array_unique
// Изучите теорию по следующим ссылкам:

// array_unique - удаление повторяющихся элементов из массива


// №30⊗ppPmIBAr
task(30);
// Дан массив:
$arr = ['a', 'b', 'c', 'b', 'a'];
// Удалите из этого массива повторяющиеся элементы.
$arr = array_unique($arr);
print_r($arr);


// Начало и конец массива
// Изучите теорию по следующим ссылкам:

// array_shift array_pop array_unshift array_push

/* array_shift - удаляет и возвращает первый элемент массива
array_pop - вырезает и возвращает последний элемент массива 
array_unshift - добавляет новые элементы в начало массива, возвращает их количество
элементы для добавления перечисляются через запятую
array_push - добавление элементов в конец
*/


// №31⊗ppPmIBAr
task(31);
// Дан массив:
$arr = [1, 2, 3, 4, 5];
// Выведите на экран его первый и последний элемент,
// причем так, чтобы в исходном массиве они исчезли.
echo "первый элемент: " . array_shift($arr) . "\n";
echo "последний элемент" . array_pop($arr) . "\n";
print_r($arr);


// №32⊗ppPmIBAr
task(32);
// Дан массив:
$arr = [1, 2, 3, 4, 5];
// Добавьте ему в начало элемент 0, а в конец - элемент 6.
array_push($arr, 6);
array_unshift($arr, 0);
print_r($arr);


// Заполнение массива
// Изучите теорию по следующим ссылкам:

// array_pad array_fill array_fill_keys

/* 
array_pad дополняет массив определённым значением до заданного размера

array_pad(массив, до какого размера заполнить, чем заполнять )

array_fill создаёт массив заполненный элементами с определённым значением 
array_fill (ключ первого элемента, сколько элементов, чем заполнять)
array_fill_keys(массив для ключей, чем заполнять )

*/

// №33⊗ppPmIBAr
task(33);
// Дан массив:
$arr = ['a', 'b', 'c'];
// Сделайте из него следующий массив:
// 	['a', 'b', 'c', '-', '-', '-']
$arr = array_pad($arr, 6, '-');
print_r($arr);

// №34⊗ppPmIBAr
task(34);
// Заполните массив 10-ю буквами 'x'.
$arr = array_fill(0, 9, 'x');
print_r($arr);

// Работа с array_chunk
// Изучите теорию по следующим ссылкам:

// array_chunk - разбивает одномерный массив в двумерный
// array_chunk(массив, по сколько элементов)

// №35⊗ppPmIBAr
task(25);
// Создайте массив, заполненный целыми числами от 1 до 25. С помощью функции array_chunk разбейте этот массив на 5 подмассивов по пять элементов в каждом.
$arr = range(1, 25);
$arr = array_chunk($arr, 5);
print_r($arr);

// Работа с array_count_values
// Изучите теорию по следующим ссылкам:

// array_count_values - возвращает ассоциативный массив

// №36⊗ppPmIBAr
task(36);
// Дан массив:
$arr = ['a', 'b', 'c', 'b', 'a'];
// Подсчитайте сколько раз встречается каждая из букв.
$res = array_count_values($arr);
print_r($res);

// Работа с array_map
// Изучите теорию по следующим ссылкам:

// array_map

// №37⊗ppPmIBAr
task(37);
// Дан массив:
$arr = [1, 2, 3, 4, 5];
function square($num)
{
    return $num * $num;
}
// Создайте новый массив, в котором будут лежать квадратные корни данных элементов.
$res = array_map('square', $arr);
print_r($res);

// Работа с array_intersect, array_diff
// Изучите теорию по следующим ссылкам:

// array_intersect array_diff

/* 

array_intersect вычисляет пересечение массивов и возвращает массив 
из элементов, которые есть во всех массивах переданных в функцию

array_diff - сравнивает массив и возвращает элементы из первого массива 
которые отсутствуют в остальных переданных массивах. 

*/

// №38⊗ppPmIBAr
task(38);
// Дан массивы:
$arr1 = [1, 2, 3, 4, 5];
$arr2 = [3, 4, 5, 6, 7];
// Запишите в новый массив элементы, которые есть и в том,
// и в другом массиве.

$intersectArray = array_intersect($arr1, $arr2);
print_r($intersectArray);

// №39⊗ppPmIBAr
task(39);
// Дан массивы:
$arr1 = [1, 2, 3, 4, 5];
$arr2 = [3, 4, 5, 6, 7];
// Запишите в новый массив элементы, которые не присутствуют в обоих массивах одновременно.

$difArray1 = array_diff($arr1, $arr2);
$difArray2 = array_diff($arr2, $arr1);
$difArrMerge = array_merge($difArray1, $difArray2);
print_r($difArray1);
print_r($difArray2);
print_r($difArrMerge);
